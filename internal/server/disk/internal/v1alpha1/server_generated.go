// Code generated by csi-proxy-api-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"

	"github.com/kubernetes-csi/csi-proxy/client/api/disk/v1alpha1"
	"github.com/kubernetes-csi/csi-proxy/client/apiversion"
	"github.com/kubernetes-csi/csi-proxy/internal/server/disk/internal"
	"google.golang.org/grpc"
)

var version = apiversion.NewVersionOrPanic("v1alpha1")

type versionedAPI struct {
	apiGroupServer internal.ServerInterface
}

func NewVersionedServer(apiGroupServer internal.ServerInterface) internal.VersionedAPI {
	return &versionedAPI{
		apiGroupServer: apiGroupServer,
	}
}

func (s *versionedAPI) Register(grpcServer *grpc.Server) {
	v1alpha1.RegisterDiskServer(grpcServer, s)
}

func (s *versionedAPI) ListDiskLocations(context context.Context, versionedRequest *v1alpha1.ListDiskLocationsRequest) (*v1alpha1.ListDiskLocationsResponse, error) {
	request := &internal.ListDiskLocationsRequest{}
	if err := Convert_v1alpha1_ListDiskLocationsRequest_To_internal_ListDiskLocationsRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.ListDiskLocations(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1alpha1.ListDiskLocationsResponse{}
	if err := Convert_internal_ListDiskLocationsResponse_To_v1alpha1_ListDiskLocationsResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}

func (s *versionedAPI) PartitionDisk(context context.Context, versionedRequest *v1alpha1.PartitionDiskRequest) (*v1alpha1.PartitionDiskResponse, error) {
	request := &internal.PartitionDiskRequest{}
	if err := Convert_v1alpha1_PartitionDiskRequest_To_internal_PartitionDiskRequest(versionedRequest, request); err != nil {
		return nil, err
	}

	response, err := s.apiGroupServer.PartitionDisk(context, request, version)
	if err != nil {
		return nil, err
	}

	versionedResponse := &v1alpha1.PartitionDiskResponse{}
	if err := Convert_internal_PartitionDiskResponse_To_v1alpha1_PartitionDiskResponse(response, versionedResponse); err != nil {
		return nil, err
	}

	return versionedResponse, err
}
