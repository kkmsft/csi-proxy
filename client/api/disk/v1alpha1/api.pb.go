// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/kubernetes-csi/csi-proxy/client/api/disk/v1alpha1/api.proto

package v1alpha1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ListDiskLocationsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListDiskLocationsRequest) Reset()         { *m = ListDiskLocationsRequest{} }
func (m *ListDiskLocationsRequest) String() string { return proto.CompactTextString(m) }
func (*ListDiskLocationsRequest) ProtoMessage()    {}
func (*ListDiskLocationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_028ab8065db229af, []int{0}
}

func (m *ListDiskLocationsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListDiskLocationsRequest.Unmarshal(m, b)
}
func (m *ListDiskLocationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListDiskLocationsRequest.Marshal(b, m, deterministic)
}
func (m *ListDiskLocationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDiskLocationsRequest.Merge(m, src)
}
func (m *ListDiskLocationsRequest) XXX_Size() int {
	return xxx_messageInfo_ListDiskLocationsRequest.Size(m)
}
func (m *ListDiskLocationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDiskLocationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListDiskLocationsRequest proto.InternalMessageInfo

type DiskLocation struct {
	Adapter              string   `protobuf:"bytes,1,opt,name=Adapter,proto3" json:"Adapter,omitempty"`
	Bus                  string   `protobuf:"bytes,2,opt,name=Bus,proto3" json:"Bus,omitempty"`
	Target               string   `protobuf:"bytes,3,opt,name=Target,proto3" json:"Target,omitempty"`
	LUNID                string   `protobuf:"bytes,4,opt,name=LUNID,proto3" json:"LUNID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiskLocation) Reset()         { *m = DiskLocation{} }
func (m *DiskLocation) String() string { return proto.CompactTextString(m) }
func (*DiskLocation) ProtoMessage()    {}
func (*DiskLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_028ab8065db229af, []int{1}
}

func (m *DiskLocation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiskLocation.Unmarshal(m, b)
}
func (m *DiskLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiskLocation.Marshal(b, m, deterministic)
}
func (m *DiskLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiskLocation.Merge(m, src)
}
func (m *DiskLocation) XXX_Size() int {
	return xxx_messageInfo_DiskLocation.Size(m)
}
func (m *DiskLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_DiskLocation.DiscardUnknown(m)
}

var xxx_messageInfo_DiskLocation proto.InternalMessageInfo

func (m *DiskLocation) GetAdapter() string {
	if m != nil {
		return m.Adapter
	}
	return ""
}

func (m *DiskLocation) GetBus() string {
	if m != nil {
		return m.Bus
	}
	return ""
}

func (m *DiskLocation) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *DiskLocation) GetLUNID() string {
	if m != nil {
		return m.LUNID
	}
	return ""
}

type ListDiskLocationsResponse struct {
	// Map of disk device IDs and <adapter, bus, target, lun ID> associated with each disk device
	DiskLocations        map[string]*DiskLocation `protobuf:"bytes,1,rep,name=disk_locations,json=diskLocations,proto3" json:"disk_locations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ListDiskLocationsResponse) Reset()         { *m = ListDiskLocationsResponse{} }
func (m *ListDiskLocationsResponse) String() string { return proto.CompactTextString(m) }
func (*ListDiskLocationsResponse) ProtoMessage()    {}
func (*ListDiskLocationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_028ab8065db229af, []int{2}
}

func (m *ListDiskLocationsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListDiskLocationsResponse.Unmarshal(m, b)
}
func (m *ListDiskLocationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListDiskLocationsResponse.Marshal(b, m, deterministic)
}
func (m *ListDiskLocationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDiskLocationsResponse.Merge(m, src)
}
func (m *ListDiskLocationsResponse) XXX_Size() int {
	return xxx_messageInfo_ListDiskLocationsResponse.Size(m)
}
func (m *ListDiskLocationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDiskLocationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListDiskLocationsResponse proto.InternalMessageInfo

func (m *ListDiskLocationsResponse) GetDiskLocations() map[string]*DiskLocation {
	if m != nil {
		return m.DiskLocations
	}
	return nil
}

type PartitionDiskRequest struct {
	// Disk device ID of the disk to partition
	DiskId               string   `protobuf:"bytes,1,opt,name=disk_id,json=diskId,proto3" json:"disk_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PartitionDiskRequest) Reset()         { *m = PartitionDiskRequest{} }
func (m *PartitionDiskRequest) String() string { return proto.CompactTextString(m) }
func (*PartitionDiskRequest) ProtoMessage()    {}
func (*PartitionDiskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_028ab8065db229af, []int{3}
}

func (m *PartitionDiskRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PartitionDiskRequest.Unmarshal(m, b)
}
func (m *PartitionDiskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PartitionDiskRequest.Marshal(b, m, deterministic)
}
func (m *PartitionDiskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionDiskRequest.Merge(m, src)
}
func (m *PartitionDiskRequest) XXX_Size() int {
	return xxx_messageInfo_PartitionDiskRequest.Size(m)
}
func (m *PartitionDiskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionDiskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionDiskRequest proto.InternalMessageInfo

func (m *PartitionDiskRequest) GetDiskId() string {
	if m != nil {
		return m.DiskId
	}
	return ""
}

type PartitionDiskResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PartitionDiskResponse) Reset()         { *m = PartitionDiskResponse{} }
func (m *PartitionDiskResponse) String() string { return proto.CompactTextString(m) }
func (*PartitionDiskResponse) ProtoMessage()    {}
func (*PartitionDiskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_028ab8065db229af, []int{4}
}

func (m *PartitionDiskResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PartitionDiskResponse.Unmarshal(m, b)
}
func (m *PartitionDiskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PartitionDiskResponse.Marshal(b, m, deterministic)
}
func (m *PartitionDiskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionDiskResponse.Merge(m, src)
}
func (m *PartitionDiskResponse) XXX_Size() int {
	return xxx_messageInfo_PartitionDiskResponse.Size(m)
}
func (m *PartitionDiskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionDiskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionDiskResponse proto.InternalMessageInfo

type RescanRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RescanRequest) Reset()         { *m = RescanRequest{} }
func (m *RescanRequest) String() string { return proto.CompactTextString(m) }
func (*RescanRequest) ProtoMessage()    {}
func (*RescanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_028ab8065db229af, []int{5}
}

func (m *RescanRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RescanRequest.Unmarshal(m, b)
}
func (m *RescanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RescanRequest.Marshal(b, m, deterministic)
}
func (m *RescanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RescanRequest.Merge(m, src)
}
func (m *RescanRequest) XXX_Size() int {
	return xxx_messageInfo_RescanRequest.Size(m)
}
func (m *RescanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RescanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RescanRequest proto.InternalMessageInfo

type RescanResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RescanResponse) Reset()         { *m = RescanResponse{} }
func (m *RescanResponse) String() string { return proto.CompactTextString(m) }
func (*RescanResponse) ProtoMessage()    {}
func (*RescanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_028ab8065db229af, []int{6}
}

func (m *RescanResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RescanResponse.Unmarshal(m, b)
}
func (m *RescanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RescanResponse.Marshal(b, m, deterministic)
}
func (m *RescanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RescanResponse.Merge(m, src)
}
func (m *RescanResponse) XXX_Size() int {
	return xxx_messageInfo_RescanResponse.Size(m)
}
func (m *RescanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RescanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RescanResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ListDiskLocationsRequest)(nil), "v1alpha1.ListDiskLocationsRequest")
	proto.RegisterType((*DiskLocation)(nil), "v1alpha1.DiskLocation")
	proto.RegisterType((*ListDiskLocationsResponse)(nil), "v1alpha1.ListDiskLocationsResponse")
	proto.RegisterMapType((map[string]*DiskLocation)(nil), "v1alpha1.ListDiskLocationsResponse.DiskLocationsEntry")
	proto.RegisterType((*PartitionDiskRequest)(nil), "v1alpha1.PartitionDiskRequest")
	proto.RegisterType((*PartitionDiskResponse)(nil), "v1alpha1.PartitionDiskResponse")
	proto.RegisterType((*RescanRequest)(nil), "v1alpha1.RescanRequest")
	proto.RegisterType((*RescanResponse)(nil), "v1alpha1.RescanResponse")
}

func init() {
	proto.RegisterFile("github.com/kubernetes-csi/csi-proxy/client/api/disk/v1alpha1/api.proto", fileDescriptor_028ab8065db229af)
}

var fileDescriptor_028ab8065db229af = []byte{
	// 400 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x5f, 0x6f, 0xda, 0x30,
	0x14, 0xc5, 0x17, 0xfe, 0x84, 0xed, 0x32, 0x18, 0xb3, 0x18, 0x78, 0x79, 0xd8, 0x90, 0xf7, 0xc2,
	0xc3, 0x48, 0x04, 0x93, 0xa6, 0x69, 0xd2, 0x1e, 0x56, 0xd1, 0x4a, 0x48, 0xa8, 0xaa, 0xa2, 0x56,
	0xea, 0x4b, 0x5b, 0x99, 0xc4, 0x02, 0x2b, 0x69, 0x92, 0xc6, 0x0e, 0x2a, 0xdf, 0xb3, 0x5f, 0xa6,
	0x6f, 0x95, 0xf3, 0xa7, 0x40, 0x81, 0xaa, 0x6f, 0xbe, 0xe7, 0x9e, 0x73, 0xe3, 0xdf, 0x8d, 0xe1,
	0x64, 0xce, 0xe5, 0x22, 0x99, 0x99, 0x4e, 0x78, 0x6b, 0x79, 0xc9, 0x8c, 0xc5, 0x01, 0x93, 0x4c,
	0x0c, 0x1c, 0xc1, 0x2d, 0x47, 0xf0, 0x41, 0x14, 0x87, 0xf7, 0x2b, 0xcb, 0xf1, 0x39, 0x0b, 0xa4,
	0x45, 0x23, 0x6e, 0xb9, 0x5c, 0x78, 0xd6, 0x72, 0x48, 0xfd, 0x68, 0x41, 0x87, 0x4a, 0x31, 0xa3,
	0x38, 0x94, 0x21, 0x7a, 0x5f, 0x68, 0xc4, 0x00, 0x3c, 0xe5, 0x42, 0x8e, 0xb9, 0xf0, 0xa6, 0xa1,
	0x43, 0x25, 0x0f, 0x03, 0x61, 0xb3, 0xbb, 0x84, 0x09, 0x49, 0x16, 0xf0, 0x71, 0x53, 0x47, 0x18,
	0x6a, 0xff, 0x5d, 0x1a, 0x49, 0x16, 0x63, 0xad, 0xa7, 0xf5, 0x3f, 0xd8, 0x45, 0x89, 0x5a, 0x50,
	0x3e, 0x4a, 0x04, 0x2e, 0xa5, 0xaa, 0x3a, 0xa2, 0x0e, 0xe8, 0xe7, 0x34, 0x9e, 0x33, 0x89, 0xcb,
	0xa9, 0x98, 0x57, 0xa8, 0x0d, 0xd5, 0xe9, 0xc5, 0xe9, 0x64, 0x8c, 0x2b, 0xa9, 0x9c, 0x15, 0xe4,
	0x41, 0x83, 0xaf, 0x7b, 0xae, 0x21, 0xa2, 0x30, 0x10, 0x0c, 0x5d, 0x41, 0x53, 0x81, 0xdc, 0xf8,
	0x45, 0x07, 0x6b, 0xbd, 0x72, 0xbf, 0x3e, 0xfa, 0x6d, 0x16, 0x18, 0xe6, 0xc1, 0xb0, 0xb9, 0xa5,
	0x1e, 0x07, 0x32, 0x5e, 0xd9, 0x0d, 0x77, 0x53, 0x33, 0x2e, 0x01, 0xed, 0x9a, 0x14, 0x92, 0xc7,
	0x56, 0x39, 0xa8, 0x3a, 0xa2, 0x9f, 0x50, 0x5d, 0x52, 0x3f, 0x61, 0x29, 0x66, 0x7d, 0xd4, 0x59,
	0x7f, 0x7d, 0x33, 0x6e, 0x67, 0xa6, 0xbf, 0xa5, 0x3f, 0x1a, 0xb1, 0xa0, 0x7d, 0x46, 0x63, 0xc9,
	0x95, 0xae, 0x3c, 0xf9, 0x62, 0x51, 0x17, 0x6a, 0x29, 0x10, 0x77, 0xf3, 0xf9, 0xba, 0x2a, 0x27,
	0x2e, 0xe9, 0xc2, 0x97, 0x17, 0x81, 0x8c, 0x82, 0x7c, 0x82, 0x86, 0xcd, 0x84, 0x43, 0x83, 0xe2,
	0xdf, 0xb4, 0xa0, 0x59, 0x08, 0x99, 0x65, 0xf4, 0xa8, 0x41, 0x45, 0x65, 0xd0, 0x35, 0x7c, 0xde,
	0x59, 0x07, 0x22, 0xaf, 0xee, 0x2a, 0x9d, 0x69, 0xfc, 0x78, 0xc3, 0x3e, 0xc9, 0x3b, 0x64, 0x43,
	0x63, 0xeb, 0x92, 0xe8, 0xdb, 0x3a, 0xb7, 0x0f, 0xd7, 0xf8, 0x7e, 0xb0, 0xff, 0x3c, 0xf3, 0x1f,
	0xe8, 0x19, 0x0e, 0xea, 0xae, 0xcd, 0x5b, 0xc4, 0x06, 0xde, 0x6d, 0x14, 0xf1, 0x99, 0x9e, 0x3e,
	0xeb, 0x5f, 0x4f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x2c, 0x34, 0x2e, 0x96, 0x20, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DiskClient is the client API for Disk service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DiskClient interface {
	// ListDiskLocations returns locations <Adapter, Bus, Target, LUN ID> of all
	// disk devices enumerated by the host
	ListDiskLocations(ctx context.Context, in *ListDiskLocationsRequest, opts ...grpc.CallOption) (*ListDiskLocationsResponse, error)
	// PartitionDisk initializes and partitions a disk device (if the disk has not
	// been partitioned already) and returns the resulting volume device ID
	PartitionDisk(ctx context.Context, in *PartitionDiskRequest, opts ...grpc.CallOption) (*PartitionDiskResponse, error)
	// Rescan refreshes the host's storage cache
	Rescan(ctx context.Context, in *RescanRequest, opts ...grpc.CallOption) (*RescanResponse, error)
}

type diskClient struct {
	cc *grpc.ClientConn
}

func NewDiskClient(cc *grpc.ClientConn) DiskClient {
	return &diskClient{cc}
}

func (c *diskClient) ListDiskLocations(ctx context.Context, in *ListDiskLocationsRequest, opts ...grpc.CallOption) (*ListDiskLocationsResponse, error) {
	out := new(ListDiskLocationsResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.Disk/ListDiskLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskClient) PartitionDisk(ctx context.Context, in *PartitionDiskRequest, opts ...grpc.CallOption) (*PartitionDiskResponse, error) {
	out := new(PartitionDiskResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.Disk/PartitionDisk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskClient) Rescan(ctx context.Context, in *RescanRequest, opts ...grpc.CallOption) (*RescanResponse, error) {
	out := new(RescanResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.Disk/Rescan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiskServer is the server API for Disk service.
type DiskServer interface {
	// ListDiskLocations returns locations <Adapter, Bus, Target, LUN ID> of all
	// disk devices enumerated by the host
	ListDiskLocations(context.Context, *ListDiskLocationsRequest) (*ListDiskLocationsResponse, error)
	// PartitionDisk initializes and partitions a disk device (if the disk has not
	// been partitioned already) and returns the resulting volume device ID
	PartitionDisk(context.Context, *PartitionDiskRequest) (*PartitionDiskResponse, error)
	// Rescan refreshes the host's storage cache
	Rescan(context.Context, *RescanRequest) (*RescanResponse, error)
}

// UnimplementedDiskServer can be embedded to have forward compatible implementations.
type UnimplementedDiskServer struct {
}

func (*UnimplementedDiskServer) ListDiskLocations(ctx context.Context, req *ListDiskLocationsRequest) (*ListDiskLocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDiskLocations not implemented")
}
func (*UnimplementedDiskServer) PartitionDisk(ctx context.Context, req *PartitionDiskRequest) (*PartitionDiskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartitionDisk not implemented")
}
func (*UnimplementedDiskServer) Rescan(ctx context.Context, req *RescanRequest) (*RescanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rescan not implemented")
}

func RegisterDiskServer(s *grpc.Server, srv DiskServer) {
	s.RegisterService(&_Disk_serviceDesc, srv)
}

func _Disk_ListDiskLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDiskLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskServer).ListDiskLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.Disk/ListDiskLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiskServer).ListDiskLocations(ctx, req.(*ListDiskLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Disk_PartitionDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartitionDiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskServer).PartitionDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.Disk/PartitionDisk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiskServer).PartitionDisk(ctx, req.(*PartitionDiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Disk_Rescan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RescanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskServer).Rescan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.Disk/Rescan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiskServer).Rescan(ctx, req.(*RescanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Disk_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1alpha1.Disk",
	HandlerType: (*DiskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDiskLocations",
			Handler:    _Disk_ListDiskLocations_Handler,
		},
		{
			MethodName: "PartitionDisk",
			Handler:    _Disk_PartitionDisk_Handler,
		},
		{
			MethodName: "Rescan",
			Handler:    _Disk_Rescan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/kubernetes-csi/csi-proxy/client/api/disk/v1alpha1/api.proto",
}
